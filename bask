#!/usr/bin/env bash
#
#                   ___         ___         ___
#      _____       /  /\       /  /\       /__/|
#     /  /::\     /  /::\     /  /:/_     |  |:|
#    /  /:/\:\   /  /:/\:\   /  /:/ /\    |  |:|
#   /  /:/~/::\ /  /:/~/::\ /  /:/ /::\ __|  |:|
#  /__/:/ /:/\:/__/:/ /:/\:/__/:/ /:/\:/__/\_|:|____
#  \  \:\/:/~/:\  \:\/:/__\\  \:\/:/~/:\  \:\/:::::/
#   \  \::/ /:/ \  \::/     \  \::/ /:/ \  \::/~~~~
#    \  \:\/:/   \  \:\      \__\/ /:/   \  \:\
#     \  \::/     \  \:\       /__/:/     \  \:\
#      \__\/       \__\/       \__\/       \__\/
#
#
# Copyright (c) 2015 William Melody • hi@williammelody.com

###############################################################################
# Strict Mode
###############################################################################

# Treat unset variables and parameters other than the special parameters ‘@’ or
# ‘*’ as an error when performing parameter expansion. An 'unbound variable'
# error message will be written to the standard error, and a non-interactive
# shell will exit.
#
# This requires using parameter expansion to test for unset variables.
#
# http://www.gnu.org/software/bash/manual/bashref.html#Shell-Parameter-Expansion
#
# The two approaches that are probably the most appropriate are:
#
# ${parameter:-word}
#   If parameter is unset or null, the expansion of word is substituted.
#   Otherwise, the value of parameter is substituted. In other words, "word"
#   acts as a default value when the value of "$parameter" is blank. If "word"
#   is not present, then the default is blank (essentially an empty string).
#
# ${parameter:?word}
#   If parameter is null or unset, the expansion of word (or a message to that
#   effect if word is not present) is written to the standard error and the
#   shell, if it is not interactive, exits. Otherwise, the value of parameter
#   is substituted.
#
# Examples
# ========
#
# Arrays:
#
#   ${some_array[@]:-}              # blank default value
#   ${some_array[*]:-}              # blank default value
#   ${some_array[0]:-}              # blank default value
#   ${some_array[0]:-default_value} # default value: the string 'default_value'
#
# Positional variables:
#
#   ${1:-alternative} # default value: the string 'alternative'
#   ${2:-}            # blank default value
#
# With an error message:
#
#   ${1:?'error message'}  # exit with 'error message' if variable is unbound
#
# Short form: set -u
set -o nounset

# Exit immediately if a pipeline returns non-zero.
#
# NOTE: this has issues. When using read -rd '' with a heredoc, the exit
# status is non-zero, even though there isn't an error, and this setting
# then causes the script to exit. read -rd '' is synonymous to read -d $'\0',
# which means read until it finds a NUL byte, but it reaches the EOF (end of
# heredoc) without finding one and exits with a 1 status. Therefore, when
# reading from heredocs with set -e, there are three potential solutions:
#
# Solution 1. set +e / set -e again:
#
# set +e
# read -rd '' variable <<EOF
# EOF
# set -e
#
# Solution 2. <<EOF || true:
#
# read -rd '' variable <<EOF || true
# EOF
#
# Solution 3. Don't use set -e or set -o errexit at all.
#
# More information:
#
# https://www.mail-archive.com/bug-bash@gnu.org/msg12170.html
#
# Short form: set -e
set -o errexit

# Return value of a pipeline is the value of the last (rightmost) command to
# exit with a non-zero status, or zero if all commands in the pipeline exit
# successfully.
set -o pipefail

# Set IFS to just newline and tab at the start
#
# http://www.dwheeler.com/essays/filenames-in-shell.html
#
# $DEFAULT_IFS and $SAFER_IFS
#
# $DEFAULT_IFS contains the default $IFS value in case it's needed, such as
# when expanding an array and you want to separate elements by spaces.
# $SAFER_IFS contains the preferred settings for the program, and setting it
# separately makes it easier to switch between the two if needed.
#
# NOTE: also printing $DEFAULT_IFS to /dev/null to avoid shellcheck warnings
# about the variable being unused.
DEFAULT_IFS="$IFS"; printf "%s" "$DEFAULT_IFS" > /dev/null
SAFER_IFS="$(printf '\n\t')"
# Then set $IFS
IFS="$SAFER_IFS"

###############################################################################
# Globals
###############################################################################

_VERSION="0.1.0-alpha"

# DEFAULT_COMMAND
#
# The command to be run by default, when no command name is specified. If the
# environment has an existing $DEFAULT_COMMAND set, then that value is used.
DEFAULT_COMMAND="${DEFAULT_COMMAND:-help}"

###############################################################################
# Debug
###############################################################################

# _debug()
#
# A simple function for executing a specified command if the `$_USE_DEBUG`
# variable has been set. The command is expected to print a message and
# should typically be either `echo`, `printf`, or `cat`.
#
# Usage:
#   _debug printf "Debug info. Variable: %s\n" "$0"
_debug() {
  if [[ "${_USE_DEBUG:-"0"}" -eq 1 ]]; then
    # Prefix debug message with "bug (U+1F41B)"
    printf "🐛  "
    "$@"
    printf "――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――\n"
  fi
}
# debug()
#
# Print the specified message if the `$_USE_DEBUG` variable has been set.
#
# This is a shortcut for the _debug() function that simply echos the message.
#
# Usage:
#   debug "Debug info. Variable: $0"
debug() {
  _debug echo "$@"
}

###############################################################################
# Die
###############################################################################

# _die()
#
# A simple function for exiting with an error after executing the specified
# command. The command is expected to print a message and should typically
# be either `echo`, `printf`, or `cat`.
#
# Usage:
#   _die printf "Error message. Variable: %s\n" "$0"
_die() {
  # Prefix die message with "cross mark (U+274C)", often displayed as a red x.
  printf "❌  "
  "$@" 1>&2
  exit 1
}
# die()
#
# Exit with an error and print the specified message.
#
# This is a shortcut for the _die() function that simply echos the message.
#
# Usage:
#   die "Error message. Variable: $0"
die() {
  _die echo "$@"
}

###############################################################################
# Options
###############################################################################

# Get raw options for any commands that expect them.
RAW_OPTIONS="$*"

# Steps:
#
# 1. set expected short options in `optstring` at beginning of the "Normalize
#    Options" section,
# 2. parse options in while loop in the "Parse Options" section.

# Normalize Options ###########################################################

# Source:
#   https://github.com/e36freak/templates/blob/master/options

# The first loop, even though it uses 'optstring', will NOT check if an
# option that takes a required argument has the argument provided. That must
# be done within the second loop and case statement, yourself. Its purpose
# is solely to determine that -oARG is split into -o ARG, and not -o -A -R -G.

# Set short options -----------------------------------------------------------

# option string, for short options.
#
# Very much like getopts, expected short options should be appended to the
# string here. Any option followed by a ':' takes a required argument.
#
# In this example, `-x` and `-h` are regular short options, while `o` is
# assumed to have an argument and will be split if joined with the string,
# meaning `-oARG` would be split to `-o ARG`.
optstring=h

# Normalize -------------------------------------------------------------------

# iterate over options, breaking -ab into -a -b and --foo=bar into --foo bar
# also turns -- into --endopts to avoid issues with things like '-o-', the '-'
# should not indicate the end of options, but be an invalid option (or the
# argument to the option, such as wget -qO-)
unset options
# while the number of arguments is greater than 0
while (($#)); do
  case $1 in
    # if option is of type -ab
    -[!-]?*)
      # loop over each character starting with the second
      for ((i=1; i<${#1}; i++)); do
        # extract 1 character from position 'i'
        c=${1:i:1}
        # add current char to options
        options+=("-$c")

        # if option takes a required argument, and it's not the last char
        # make the rest of the string its argument
        if [[ $optstring = *"$c:"* && ${1:i+1} ]]; then
          options+=("${1:i+1}")
          break
        fi
      done
      ;;
    # if option is of type --foo=bar, split on first '='
    --?*=*) options+=("${1%%=*}" "${1#*=}");;
    # end of options, stop breaking them up
    --)
      options+=(--endopts)
      shift
      options+=("$@")
      break
      ;;
    # otherwise, nothing special
    *) options+=("$1");;
  esac

  shift
done
# set new positional parameters to altered options. Set default to blank.
set -- "${options[@]:-}"
unset options

# Parse Options ###############################################################

# Initialize $COMMAND_ARGV array
#
# This array contains all of the arguments that get passed along to each
# command. This is essentially the same as the program arguments, minus those
# that have been filtered out in the program option parsing loop. This array
# is initialized with $0, which is the program's name.
COMMAND_ARGV=("$0")
# Initialize $cmd and $_USE_DEBUG, which can continue to be blank depending on
# what the program needs.
cmd=""
_USE_DEBUG=0

while [ $# -gt 0 ]; do
  opt="$1"
  shift
  case "$opt" in
    -h|--help)
      cmd="help"
      ;;
    --version)
      cmd="version"
      ;;
    --debug)
      _USE_DEBUG=1
      ;;
    *)
      # The first non-option argument is assumed to be the command name.
      # All subsequent arguments are added to $COMMAND_ARGV
      if [[ -n $cmd ]]; then
        COMMAND_ARGV+=("$opt")
      else
        cmd="$opt"
      fi
      ;;
  esac
done

# Set $COMMAND_PARAMETERS to $COMMAND_ARGV, minus the initial element, $0. This
# provides an array that is equivalent to $* and $@ within each command
# function, though the array is zero-indexed, which could lead to confusion.
COMMAND_PARAMETERS=("${COMMAND_ARGV[@]:1}")

_debug printf "\$cmd: %s\n" "$cmd"
_debug printf "\$RAW_OPTIONS (one per line):\n%s\n" "$RAW_OPTIONS"
_debug printf "\$COMMAND_ARGV: %s\n" "${COMMAND_ARGV[*]}"
_debug printf "\$COMMAND_PARAMETERS: %s\n" "${COMMAND_PARAMETERS[*]:-}"

###############################################################################
# Environment
###############################################################################

# $_ME / $_ME
#
# Set to the program's basename.
_ME=$(basename "$0")

_debug printf "\$_ME: %s\n" "$_ME"

# $_this_basename
#
# Set to this file's basename
_this_basename=$(basename "$BASH_SOURCE")

_debug printf "\$_this_basename: %s\n" "$_this_basename"

# _is_sourced()
#
# Determine whether the base program is being run or whether this file is being
# sourced by a dependent script.
_is_sourced() {
  [[ ! "$_ME" == "$_this_basename" ]]
}

_debug printf "_is_sourced(): %s\n" "$(_is_sourced && echo "yes" || echo "no")"

# $_caller_directory
#
# Set to the current directory that the program is called from.
_caller_directory="$PWD"

_debug printf "\$_caller_directory: %s\n" "$_caller_directory"

###############################################################################
# Load Commands
###############################################################################

# _search_parents_and_source()
#
# Usage:
#   _search_parents_and_source "filename"
#
# Recursively search parent directories for a file with the given basenameand
# source the first one that's found.
_search_parents_and_source() {
  local source_file="$1"
  if [[ / == "$PWD" ]]; then
    cd "${_caller_directory}"
    return
  elif [[ -f "${source_file}" ]]; then
    source "${source_file}"
    cd "${_caller_directory}"
    return
  else
    cd ..
    _search_parents_and_source "${source_file}"
  fi
}

# _source_baskfile()
#
# Usage:
#   _source_baskfile
#
# Source the first Baskfile found in the current directory or any parent
# directories.
_source_baskfile() {
  local source_file="Baskfile"
  if [[ -f "$PWD/${source_file}" ]]; then
    source "${source_file}"
  else
    _search_parents_and_source "${source_file}"
  fi
}

# Initialize defined_commands array.
defined_commands=()

# _load_commands()
#
# Usage:
#   _load_commands
#
# Loads all of the commands sourced in the environment.
_load_commands() {

  _debug printf "_load_commands(): entering...\n"
  _debug printf "_load_commands() declare -F:\n%s\n" "$(declare -F)"

  _source_baskfile

  # declare is a bash built-in shell function that, when called with the '-F'
  # option, displays all of the functions with the format
  # `declare -f function_name`. These are then assigned as elements in the
  # $function_list array.
  local function_list=($(declare -F))

  for c in "${function_list[@]}"
  do
    # Each element has the format `declare -f function_name`, so set the name
    # to only the 'function_name' part of the string.
    local function_name
    function_name=$(printf "%s" "$c" | awk '{ print $3 }')

    _debug printf "_load_commands() \$function_name: %s\n" "$function_name"

    # Add the function name to the $defined_commands array unless it starts
    # with an underscore or is one of the desc(), debug(), or die() functions,
    # since these are treated as having 'private' visibility. Also exclude
    # init() and version(), which will be readded explicityly based on whether
    # this file is being sourced or run directly.
    if ! ( [[ "$function_name" =~ ^_(.*)    ]] || \
           [[ "$function_name" == "desc"    ]] || \
           [[ "$function_name" == "debug"   ]] || \
           [[ "$function_name" == "die"     ]] || \
           [[ "$function_name" == "new"     ]] || \
           [[ "$function_name" == "version" ]]
    ); then
      defined_commands+=("$function_name")
    fi
  done

  # If not sourced, add new() and version() back to command list.
  if ! _is_sourced; then
    defined_commands+=("new" "version")
  fi

  _debug printf \
    "commands() \$defined_commands:\n%s\n" \
    "${defined_commands[*]:-}"
}

###############################################################################
# Init / Main
###############################################################################

# _init()
#
# Usage:
#   _init
#
# The primary function for starting the program.
#
# NOTE: must be called at end of program after all commands have been defined.
_init() {
  _debug printf "_init(): entering...\n"
  _debug printf "_init() \$cmd (upon entering): %s\n" "$cmd"

  # If $cmd is blank, then set to help
  if [[ -z $cmd ]]; then
    cmd="$DEFAULT_COMMAND"
  fi

  # Load all of the commands.
  _load_commands

  # If the command is defined, run it, otherwise return an error.
  if ( _contains "$cmd" "${defined_commands[*]:-}" ); then
    # Pass all comment arguments to the program except for the first ($0).
    $cmd "${COMMAND_PARAMETERS[@]:-}"
  else
    _die printf "Unknown command: %s\n" "$cmd"
  fi
}

# _main()
#
# Usage:
#   _main
#
# Alias for _init. Used by some existing scripts.
_main() {
  _init "$@"
}

###############################################################################
# Utility Functions
###############################################################################

# _function_exists()
#
# Usage:
#   _function_exists "possible_function_name"
#
# Takes a potential function name as an argument and returns whether a function
# exists with that name.
_function_exists() {
  [ "$(type -t "$1")" == 'function' ]
}

# _command_exists()
#
# Usage:
#   _command_exists "possible_command_name"
#
# Takes a potential command name as an argument and returns whether a command
# exists with that name.
#
# For information on why `hash` is used here, see:
# http://stackoverflow.com/a/677212
_command_exists() {
  hash "$1" 2>/dev/null
}

# _contains()
#
# Usage:
#   _contains "$item" "${list[*]}"
#
# Takes an item and a list and determines whether the list contains the item.
_contains() {
  local test_list=(${*:2})
  for _test_element in "${test_list[@]:-}"
  do
    _debug printf "_contains() \$_test_element: %s\n" "$_test_element"
    if [[ "$_test_element" == "$1" ]]; then
      _debug printf "_contains() match: %s\n" "$1"
      return 0
    fi
  done
  return 1
}

# _join()
#
# Usage:
#   _join "," a b c
#   _join "${an_array[@]}"
#
# Takes a separator and a list of items, joining that list of items with the
# separator.
_join() {
  local separator="$1"
  local target_array=(${@:2})
  local dirty
  dirty="$(printf "${separator}%s"  "${target_array[@]}")"
  local clean="${dirty:${#separator}}"
  printf "%s" "${clean}"
}

# _command_argv_includes()
#
# Usage:
#   _command_argv_includes "an_argument"
#
# Takes a possible command argument and determines whether it is included in
# the command argument list.
#
# This is a shortcut for simple cases where a command wants to check for the
# presence of options quickly without parsing the options again.
_command_argv_includes() {
  _contains "$1" "${COMMAND_ARGV[*]}"
}

# _blank()
#
# Usage:
#   _blank "$an_argument"
#
# Takes an argument and returns true if it is blank.
_blank() {
  [[ -z "${1:-}" ]]
}

# _present()
#
# Usage:
#   _present "$an_argument"
#
# Takes an argument and returns true if it is present.
_present() {
  [[ -n "${1:-}" ]]
}

###############################################################################
# desc
###############################################################################

# _escape_function_name()
#
# Usage:
#   _escape_function_name "some-function:name"
#
# Replace ":" and "-" with "__COLON__" and "__HYPHEN__" in function names in
# order to conform to Bash identifier restrictions.
#
# Bash allows ":" and "-" in function names, but they are not allowed in
# identifiers for variables. In order to store the description in a variable
# that matches the function name, this function escapes the function name in
# order to make it suitable for use in a variable identifier.
#
# Uses built-in substring replacement:
# http://www.tldp.org/LDP/abs/html/parameter-substitution.html#EXPREPL1
_escape_function_name() {
  local escaped_colons
  local escaped_hyphens
  escaped_colons="${1//:/__COLON__}"
  escaped_hyphens="${escaped_colons//-/__HYPHEN__}"

  printf "%s" "$escaped_hyphens"
}

# desc()
#
# Usage:
#   desc command "description"
#
# Create a description for a specified command name. The command description
# text can be passed as the second argument or as standard input.
#
# To make the description text available to other functions, desc() assigns the
# text to a variable with the format $_desc_function_name
#
# NOTE:
#
# The `read` form of assignment is used for a balance of ease of
# implementation and simplicity. There is an alternative assignment form
# that could be used here:
#
# var="$(cat <<'EOM'
# some message
# EOM
# )
#
# However, this form appears to require trailing space after backslases to
# preserve newlines, which is unexpected. Using `read` simply requires
# escaping backslashes, which is more common.
desc() {
  set +e
  [[ -z $1 ]] && _die printf "desc: No command name specified.\n"

  local raw_function_name
  local escaped_function_name
  raw_function_name="$1"
  escaped_function_name="$(_escape_function_name "$raw_function_name")"

  if [[ -n ${2:-} ]]; then
    read -d '' "_desc_$escaped_function_name" <<EOM
$2
EOM
    _debug printf \
      "desc() set with argument: _desc_%s\n" \
      "$escaped_function_name"
  else
    read -d '' "_desc_$escaped_function_name"
    _debug printf \
      "desc() set with pipe: _desc_%s\n" \
      "$escaped_function_name"
  fi
  set -e
}

# _print_desc()
#
# Usage:
#   _print_desc <command>
#
# Prints the description for a given command, provided the description has been
# set using the desc() function.
_print_desc() {
  local raw_function_name
  local escaped_function_name
  raw_function_name="$1"
  escaped_function_name="$(_escape_function_name "$raw_function_name")"

  local var="_desc_$escaped_function_name"
  if [[ -n ${!var:-} ]]; then
    printf "%s\n" "${!var}"
  else
    printf "No additional information for \`%s\`\n" "$raw_function_name"
    return 1
  fi
}

###############################################################################
# Default Commands
###############################################################################

# Version #####################################################################

desc "version" <<EOM
Usage:
  $_ME ( version | --version )

Description:
  Display the current program version.

  To save you the trouble, the current version is $_VERSION
EOM
version() {
  printf "%s\n" "$_VERSION"
}

# Help ########################################################################

desc "help" <<EOM
Usage:
  $_ME help [<command>]

Description:
  Display help information for $_ME or a specified command.
EOM
_help_header() {
if _is_sourced; then
  desc "HELP_HEADER" <<EOM
$_ME - a $_this_basename script
EOM
else
  desc "HELP_HEADER" <<EOM
                  ___         ___         ___
     _____       /  /\\\       /  /\\\       /__/|
    /  /::\\\     /  /::\\\     /  /:/_     |  |:|
   /  /:/\\\:\\\   /  /:/\\\:\\\   /  /:/ /\\\    |  |:|
  /  /:/~/::\\\ /  /:/~/::\\\ /  /:/ /::\\\ __|  |:|
 /__/:/ /:/\\\:/__/:/ /:/\\\:/__/:/ /:/\\\:/__/\\\_|:|____
 \\\  \\\:\\\/:/~/:\\\  \\\:\\\/:/__\\\\\\  \\\:\\\/:/~/:\\\  \\\:\\\/:::::/
  \\\  \\\::/ /:/ \\\  \\\::/     \\\  \\\::/ /:/ \\\  \\\::/~~~~
   \\\  \\\:\\\/:/   \\\  \\\:\\\      \\\__\\\/ /:/   \\\  \\\:\\\\
    \\\  \\\::/     \\\  \\\:\\\       /__/:/     \\\  \\\:\\\\
     \\\__\\\/       \\\__\\\/       \\\__\\\/       \\\__\\\/

Version: $_VERSION
EOM
fi
}
_help_usage() {
if _is_sourced; then
  cat <<EOM
Usage:
  $_ME <command> [--command-options] [<arguments>]
  $_ME -h | --help

Options:
  -h --help  Display this help information.

Help:
  $_ME help [<command>]
EOM
else
  cat <<EOM
Usage:
  $_ME <command> [--command-options] [<arguments>]
  $_ME -h | --help
  $_ME --version

Options:
  -h --help  Display this help information.
  --version  Display version information.

Help:
  $_ME help [<command>]
EOM
fi

}
_help_header
help() {
  if [[ ${#COMMAND_ARGV[@]} = 1 ]]; then
    cat <<EOM
$(_print_desc "HELP_HEADER")

$(_help_usage)

$(commands)
EOM
  else
    _print_desc "$1"
  fi
}

# Command List ################################################################

desc "commands" <<EOM
Usage:
  $_ME commands [--raw]

Options:
  --raw  Display the command list without formatting.

Description:
  Display the list of available commands.
EOM
commands() {
  if _command_argv_includes "--raw"; then
    printf "%s\n" "${defined_commands[@]}"
  else
    printf "Available commands:\n"
    printf "  %s\n" "${defined_commands[@]}"
  fi
}

# new #########################################################################

desc "new" <<EOM
Usage:
  $_ME new [program]

Description:
  Create a Baskfile in the current directory. If a program name is provided,
  generate a $_ME-dependent program with the provided name.
EOM
_generate_baskfile() {
  if [[ -f "Baskfile" ]]; then
    printf ">> Baskfile already exists in this location.\n"
    exit 0
  else
    printf ">> Creating new Baskfile in %s\n" "${_caller_directory}"
    printf "\
# run this command with: $ %s hello
desc \"hello\" <<EOM
Usage:
  %s hello

Description:
  Print a greeting.
EOM
hello() {
  echo \">> Hello from %s!\"
}
" "$_ME" \
  "$_ME" \
  "$_ME" >> "Baskfile"
    exit 0
  fi
}
_generate_bask_script() {
  if [[ -f "$1" ]]; then
    printf ">> %s already exists\n" "$1"
    exit 0
  else
    local _script_basename
    _script_basename="$(basename "$1")"
    printf ">> Creating new bask script: %s\n" "$1"
    printf "\
#!/usr/bin/env bash
#########################################################################
# %s - a %s script
#
# Add this script and %s to your \$PATH. For usage information, run:
# %s help
#########################################################################

source \"\$(which %s)\"

desc \"hi\" <<EOM
Usage:
  \$_ME hi

Description:
  Print a greeting.
EOM
hi() {
  echo \">> Hi from %s!\"
}

_init
" "$_script_basename" \
  "$_ME" \
  "$_ME" \
  "$_script_basename" \
  "$_ME" \
  "$_script_basename" >> "$1"
    chmod +x "$1"
    exit 0
  fi
}
new() {
  _debug printf "new() \$PWD: %s\n" "${_caller_directory}"

  if [[ -n "${1:-}" ]]; then
    _generate_bask_script "$1"
  else
    _generate_baskfile
  fi
}

###############################################################################
# Commands
# =============================================================================
#
# Example command group structure:
#
# desc example ""   - Optional. A short description for the command.
# example() { : }   - The command called by the user.
#
# For usage formatting conventions see:
#   - http://docopt.org/
#   - http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap12.html
#
#
# ==============
# Micro Example
# ==============
#
# desc "micro" "Usage: $_ME micro"
# micro() {
#   echo "Hello, World!"
# }
#
# ==============
# Simple Example
# ==============
#
# desc "simple" <<EOM
# Usage:
#   $_ME simple [<name>]
#
# Description:
#   Print the greeting, "Hello, World!"
# EOM
# simple() {
#   if [[ -n "${1:-}" ]]; then
#     local name="$1"
#   else
#     local name="World"
#   fi
#   printf "Hello, %s!\n" "$name"
# }
#
# ===============
# Complex Example
# ===============
#
# desc "complex" <<EOM
# Usage:
#   $_ME complex [<name>] [--farewell]
#
# Options:
#   --farewell  Print "Goodbye, World!"
#
# Description:
#   Print the greeting, "Hello, World!"
# EOM
# complex() {
#   local greeting="Hello"
#   local arguments=()
#
#   for arg in "${COMMAND_ARGV[@]:-}"; do
#     case $arg in
#     --farewell) greeting="Goodbye";;
#     -*) _die printf "Unexpected option: %s\n" "$arg";;
#     *) arguments+=($arg);;
#     esac
#   done
#   local name=${arguments[1]:-}
#   if [[ -n "$name" ]]; then
#     printf "%s, %s!\n" "$greeting" "$name"
#   else
#     printf "%s, World!\n" "$greeting"
#   fi
# }
###############################################################################

###############################################################################
# Run Program
###############################################################################

# Call the _init function now that everything has been defined unless this file
# is sourced by a dependent script.
if ! _is_sourced; then
  _init
fi
